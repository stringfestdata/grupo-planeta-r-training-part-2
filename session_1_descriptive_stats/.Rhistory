penguins <- penguins %>%
filter(bill_length_mm > 40 & bill_length_mm < 50)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
# Solution for Exercise 1:
penguins <- penguins %>%
filter(bill_length_mm > 40 & bill_length_mm < 50)
# Solution for Exercise 2:
penguins <- penguins %>%
mutate(
small_bill = bill_length_mm < 40,
heavy_body = body_mass_g > 4500
) %>%
filter(small_bill & heavy_body)
# Solution for Exercise 3:
missing_sex_count <- sum(is.na(penguins$sex))
# Solution for Exercise 4:
filtered_penguins <- penguins %>%
filter(species == 'Adelie') %>%
arrange(desc(is.na(sex)), bill_length_mm)
# Solution for Exercise 5:
is_adelie_present <- 'adelie' %in% unique(penguins$species)
# Solution for Exercise 6:
filtered_penguins_island <- penguins %>%
filter(island %in% c('Dream', 'Torgersen'))
my_if_else <- c(-3:3, NA)
if_else(my_if_else > 0, 'plus', 'minus')
if_else(my_if_else > 0, 'plus', 'minus', '??')
case_when(
my_if_else == 0 ~ '0',
my_if_else < 0 ~ 'minus',
my_if_else > 0 ~ 'plus'
)
case_when(
my_if_else == 0 ~ '0',
my_if_else < 0 ~ 'minus',
my_if_else > 0 ~ 'plus',
is.na(my_if_else) ~ '???'
)
flights |>
mutate(
status = case_when(
is.na(arr_delay) ~ "cancelled",
arr_delay < -30 ~ "very early",
arr_delay < -15 ~ "early",
abs(arr_delay) <= 15 ~ "on time",
arr_delay < 60 ~ "late",
arr_delay < Inf ~ "very late",
),
.keep = "used"
)
flights |>
mutate(
status = case_when(
is.na(arr_delay) ~ "cancelled",
arr_delay < -30 ~ "very early",
arr_delay < -15 ~ "early",
abs(arr_delay) <= 15 ~ "on time",
arr_delay < 60 ~ "late",
arr_delay < Inf ~ "very late",
),
.keep = "used"
)
library(nycflights13)
flights |>
mutate(
status = case_when(
is.na(arr_delay) ~ "cancelled",
arr_delay < -30 ~ "very early",
arr_delay < -15 ~ "early",
abs(arr_delay) <= 15 ~ "on time",
arr_delay < 60 ~ "late",
arr_delay < Inf ~ "very late",
),
.keep = "used"
)
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
geom_point()
# Color doesn't say anything about the aesthetic mappings
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~cyl)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
theme_bw()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
theme_void()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
theme_minimal()
potential_outliers <- mpg |>
filter(hwy > 40 | (hwy > 20 & displ > 5))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_text_repel(data = potential_outliers, aes(label = model)) +
geom_point(data = potential_outliers, color = "red") +
geom_point(
data = potential_outliers,
color = "red", size = 3, shape = "circle open"
)
library(ggrepel)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_text_repel(data = potential_outliers, aes(label = model)) +
geom_point(data = potential_outliers, color = "red") +
geom_point(
data = potential_outliers,
color = "red", size = 3, shape = "circle open"
)
install.packages('infer')
library(infer)
browseVignettes('infer')
browseVignettes('infer')
browseVignettes('infer')
data(gss)
gss %>%
specify(response = age)
gss %>%
specify(response = age) %>%
class()
gss %>%
specify(response = age)
gss %>%
specify(age ~ partyid)
names(gss)
gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
hypothesize(null = "point", mu = 40
gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40)
gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40)
hypothesize(null = 'point;, mu = 40) %>%
gss %>%
specify(response = hours) %>%
hypothesize(null = 'point', mu = 40) %>%
calculate(stat = 'mean')
gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
# visualize the null distribution and test statistic!
null_dist_1_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
null_dist_1_sample <- gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
# visualize the null distribution and test statistic!
null_dist_1_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
observed_statistic <- gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
null_dist_1_sample <- gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
# visualize the null distribution and test statistic!
null_dist_1_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40) %>%
calculate(stat = "t") %>%
dplyr::pull()
observed_statistic <- gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
observed_statistic <- gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
observed_statistic
t_test(x = gss,
formula = hours ~ college,
order = c("degree", "no degree"),
alternative = "two-sided")
t_test(x = gss,
formula = hours ~ college,
order = c('degree', 'no degree'))
null_dist_2_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
null_dist_2_sample <- gss %>%
specify(hours ~ college) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("degree", "no degree"))
null_dist_2_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
p_value_2_sample <- null_dist_2_sample %>%
get_p_value(obs_stat = observed_statistic,
direction = "two-sided")
# theory-based
t_test(gss, response = hours, mu = 40)
gss %>%
specify(response = hours)
observed_statistic <- gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
observed_statistic
# theory-based
t_test(gss, response = hours, mu = 40)
null_dist_1_sample <- gss %>%
specify(response = hours) %>%
hypothesize(null = 'point', mu = 40) %>%
generate(reps = 1000, type = 'bootstrap') %>%
calculate(stat = 'mean')
# visualize the null distribution and test statistic!
null_dist_1_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
t_test(x = gss,
formula = hours ~ college,
order = c('degree', 'no degree'))
observed_statistic <- gss %>%
specify(hours ~ college) %>%
calculate(stat = "diff in means", order = c("degree", "no degree"))
observed_statistic
null_dist_2_sample <- gss %>%
specify(hours ~ college) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("degree", "no degree"))
null_dist_2_sample %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
p_value_2_sample <- null_dist_2_sample %>%
get_p_value(obs_stat = observed_statistic,
direction = "two-sided")
p_value_2_sample
t_test(x = gss,
formula = hours ~ college,
order = c('degree', 'no degree'))
p_value_2_sample
data(package = 'infer')
library(fivethirtyeight)
install.packages('fivethirtyeight')
library(fivethirtyeight)
data(package = 'fivethirtyeight')
browseVignettes('infer')
# visualize the theoretical null distribution and test statistic!
null_dist_theory <- gss %>%
specify(age ~ partyid) %>%
assume(distribution = "F")
visualize(null_dist_theory) +
shade_p_value(observed_f_statistic,
direction = "greater")
observed_f_statistic <- gss %>%
specify(age ~ partyid) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
visualize(null_dist_theory) +
shade_p_value(observed_f_statistic,
direction = "greater")
